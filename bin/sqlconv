#!/usr/bin/env ruby

VERSION = "1.2.0"

STDOUT.sync = true

require "censive"
require "optparse"
require "strscan"

trap("INT" ) { abort "\n" }

def die!; abort "#{File.basename($0)}: invalid usage, use -h for help"; end

OptionParser.new.instance_eval do
  @banner  = "usage: #{program_name} <options> <src_table>(:[sel1,sel2,...]) [dst_table][:][col1,col2,...] <dumpfile.sql or ARGF>"

  on       "--csv"                    , "Output comma separated values instead of SQL"
  on       "--psv"                    , "Output pipe separated values instead of SQL"
  on       "--tsv"                    , "Output tab separated values instead of SQL"
  on "-p", "--plugin <plugin1.rb,...>", "Comma separated list of plugins"
  on "-r", "--replace"                , "Use 'replace into' instead of 'insert into'"
  on "-s", "--show"                   , "Show column indexes and values for the first row"
  on "-t", "--table"                  , "Display output as a formatted table"

  on "-h", "--help"                   , "Show help and command usage" do Kernel.abort to_s; end
  on "-v", "--version"                , "Show version number" do Kernel.abort "#{program_name} #{VERSION}"; end

  self
end.parse!(into: opts={}) rescue abort($!.message)

csvs = opts[:csv    ] and mode = "csv"
pipe = opts[:psv    ] and mode = "psv"
tabs = opts[:tsv    ] and mode = "tsv"
nice = opts[:table  ] and mode = "table"
repl = opts[:replace] and mode = "replace"
show = opts[:show   ] and mode = "show"
plug = opts[:plugin].to_s.downcase.split(",")

die! if [csvs, pipe, tabs, nice, repl, show].compact.size > 1

if ARGV.shift =~ /^([a-z][-\w]*):?(.+)?$/i
  tab1 = $1
  map1 = $2
end

if !ARGV.empty? and !File.exist?(ARGV.first)
  if ARGV.shift =~ /^((?>[a-z]?[-\w]*)(?::|$))?(.+)?$/i
    $1.to_s.size > 0 and tab2 = $1.chomp(":")
    $2.to_s.size > 0 and map2 = $2.squeeze(",").sub(/^,+/,"").sub(/,+$/,"")
  end
  die! if $0.empty?
end

# ==[ Helpers ]==

class StringScanner
  def scan_for(regx)
    data = scan_until(Regexp === regx ? regx : /#{regx}/)
    size = matched_size or return
    data[-size..-1]
  end

  def scan_str(str)
    if peek(str.size) == str
      self.pos += str.size
      str
    else
      nil
    end
  end

  def scan_while(regx, skip=nil)
    seen = -1
    list = []
    while item = scan(regx)
      if skip
        list << item if (seen += 1) % skip == 0
      else
        list << item
      end
    end
    list
  end
end

# struct for dealing with selectors
Selector = Struct.new(:want, :func, :text, :zero, :thru, :reps, :from, :till)

# convert user request into selectors
def grok(want)
  (want || "1-").strip.split(/\s*,\s*/).map do |item|
    item =~ %r!^(?:(\d+)\*)?(?:(?:( # $1: repeat
      (?:\d+(?=\())|[a-zA-Z]\w*)    # $2: function name
      (\()?)?(?:                    # $3: optional paren
      (?:(['"])(.*?)\4)? |          # $4: quote, $5: literal
      (0) |                         # $6: zero
      ((?>[1-9]\d*))?               # $7: from
        ((?<=\d)-|-(?=\d))?         # $8: thru
        ((?>[1-9]\d*))?             # $9: till
      )\)?)$
    !iox or raise "invalid selector item '#{item}'"
    Selector.new(*$~.values_at(0, 2, 5, 6, 8), *$~.values_at(1, 7, 9).map {|e| e&.to_i })
  end or raise "invalid selector '#{want}'"
end

# display table output
def table(cols, rows)
  cols.is_a?(Array) && cols.size > 0 or return
  rows.is_a?(Array) && rows.size > 0 or return
  join = " │ "
  both = [cols] + rows
  flip = both.transpose
  wide = flip.map {|row| row.map {|col| col.to_s.size }.max }
  pict = wide.map {|len| "%-#{len}.#{len}s" }.join(join)
  pict = [join, pict, join].join.strip
  base = (pict % ([""] * cols.size))[1...-1]
  ltop = "┌" + base.tr("│ ", "┬─") + "┐"
  lmid = "├" + base.tr("│ ", "┼─") + "┤"
  lbot = "└" + base.tr("│ ", "┴─") + "┘"
  seen = -1
  puts "", ltop
  both.each do |vals|
    puts pict % vals
    puts lmid if (seen += 1) == 0
  end
  puts lbot, "#{seen} rows displayed", ""
end

def escape(str)
  str =~ /\A(\d+|null)\z/i ? $1 : %|'#{str.gsub("'", "\\\\'")}'|
end

def unescape(str, nulls=false)
  str =~ /\A['"]/ and return str[1..-2].gsub("|","~").gsub("''", "'")
  str == "NULL"   and return "" unless nulls
  str
end

def unescape!(str)
  unescape(str, true)
end

# convert the insert statements
def conv(tab1, map1, tab2, map2, mode, dump)
  data = StringScanner.new("")
  need = grok(map1)
  rows = nil
  cols = nil
  len1 = nil
  len2 = nil
  ours = []
  posn = 0

  # statement prefix
  pref = [
    "#{mode == 'replace' ? 'replace' : 'insert'} into #{tab2 || tab1}",
    (" (#{map2})" if map2),
    " values (",
  ].compact.join

  # find source table
  data.string = dump.read # dump.read(5000) # TODO: Add streaming support
  into = data.scan_for(/insert into (['"`]?)#{tab1}\1 values /io)
  into or abort "unable to find insert statements for the '#{tab1}' table"

  # if needed, output pipes header
  case mode
  when "psv", "tsv"
    puts map2.gsub(",", mode == "psv" ? "|" : "\t") if map2
    lean = true
  when "csv"
    $csv = Censive.writer(out: $stdout)
    $csv << map2.split(",") if map2
    lean = true
  when "table"
    rows = []
    lean = true
  end

  # process each line
  loop do

    # parse insert statements
    if data.scan_str("(") or data.scan_str(into + "(")
      cols = data.scan_while(/('.*?(?<!\\)'|(?>[^',()]+)|,)/, 2)
      cols.empty? and abort "bad sql parse: '#{line}'"
      cols.map! {|item| unescape(item)} if lean
      data.scan(/\)[;,]\s*/)
    else
      break
    end

    # perform one-time check on source column bounds
    unless len1
      len1 = cols.size
      if mode == "show"
        data = cols.map.with_index do |data, i|
          [i + 1, data.size > 32 ? data[...-3] + "..." : data]
        end
        table %w[ col data], data
        exit
      end
      need.each do |item|
        item.text &&= escape(item.text) unless lean
        if (len2 = [item.from, item.till, 0].compact.max) > len1
          warn "selector '#{item.want}' referenced source column #{len2}, but only #{len1} are defined"
          cols &&= nil
        end
      end
      cols or exit
      len1 = cols.size
      len2 = nil # we hijacked len2, so clear it
    end

    # pluck desired columns
    ours.clear
    need.each do |item|
      (item.reps || 1).times do # repeats
        case
        when item.func # function (TODO: honor text/zero/from/till)
          case item.func
          when "rand"     then ours.push("'random number here!'")
          when "n","null" then ours.push("null")
          when "z"        then ours.push((val = cols[item.from     -1]) == "NULL" ? 0  : val)
          when /^(\d+)$/
            val = cols[item.func.to_i - 1]
            val = unescape(val) unless lean
            val = val[0, item.from]
            ours.push(val)
          else
            defined?(item.func) == "method" or abort "undefined function '#{item.func}'"
            ours.push *(send item.func, *Array[cols[item.from-1]])
          end
        when item.text # literal
          ours.push(item.text)
        when item.zero # zero
          ours.push(0)
        when item.thru # range
          from = item.from || 1
          till = item.till || len1
          ours.concat case till <=> from
            when 0,1 then cols[(from-1)..(till-1)]
            when -1  then cols[(till-1)..(from-1)].reverse
          end
        when item.from || item.till # one column
          ours.push(cols[(item.from || item.till) - 1])
        else # null
          ours.push("null")
        end
      end
    end

    # perform one-time check on destination column counts
    unless len2
      if map2 and (len2 = map2.split(",").size) != ours.size
        warn "destination column mismatch (#{ours.size} sourced but #{len2} targeted)"
        cols &&= nil
      else
        len2 = ours.size
      end
      cols or exit
    end

    # generate output
    case mode
    when "psv"   then puts ours * "|"
    when "tsv"   then puts ours * "\t"
    when "csv"   then $csv << ours
    when "table" then rows << ours.dup
    else puts [pref, ours * ",", ");"].join
    end
  end

  # output table
  if mode == "table"
    cols = map2 ? map2.split(",") : rows[0].size.times.map {|i| "col#{i+1}"}
    table cols, rows
  end
end

# ==[ Let 'er rip! ]==

conv tab1, map1, tab2 || tab1, map2, mode, ARGF
